[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet.vim']
on_i = 1
hook_source = '''
" set completeopt+=noinsert
" set completeopt-=preview
let g:deoplete#enable_at_startup = 1
autocmd CompleteDone * pclose!
set completeopt+=noselect
call deoplete#custom#option('min_pattern_length', 1)
call deoplete#custom#option('omni_patterns', {
  \ 'scala': ['[^.\s*\t]\.\w*', '[:\[,] ?\w*','^import .*', '[^.\s*\t]override def '],
  \ 'go': '[^. *\t]\.\w*',
  \})
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_source = '''
  imap <C-y>     <Plug>(neosnippet_expand_or_jump)
  smap <C-y>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-y>     <Plug>(neosnippet_expand_target)
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.config/nvim/snippets,' . dein#get('neosnippet-snippets').path . '/neosnippets'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'eagletmt/neco-ghc'

[[plugins]]
repo = 'jodosha/vim-godebug'
on_ft = 'go'
hook_source = '''
 let g:go_term_enabled=1
'''

[[plugins]]
on_ft = 'swift'
repo = 'landaire/deoplete-swift'
