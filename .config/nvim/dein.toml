[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
call defx#custom#column('filename', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': '',
      \ 'selected_icon': '✓',
      \ })

nnoremap <silent> ,fi :Defx `expand('%:p:h')` -search=`expand('%:p')` -split=vertical -winwidth=30 -direction=topleft<CR>
nnoremap <silent> ,ff :Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <silent> ,fp :Defx<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> o
  \ defx#is_directory() ?
  \ defx#do_action('open_or_close_tree') :
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
  nnoremap <silent><buffer><expr> e defx#do_action('drop')
  nnoremap <silent><buffer><expr> E defx#do_action('open')
  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> s defx#do_action('open', 'split')
  nnoremap <silent><buffer><expr> v defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:filename:t:size:time')
  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> > defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> . defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  " nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'iCyMind/NeoSolarized'
hook_add = '''
au ColorScheme * hi Normal ctermbg=none guibg=none
colorscheme NeoSolarized
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#fnamemod = ':t'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
epends = 'vim-airline'
if = 'filereadable( $HOME . "/.config/.home" )'
hook_add = '''
let g:airline_theme='solarized'
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <Leader>tt :TagbarToggle<CR>
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_left = 1

let g:tagbar_type_coffee = {
    \ 'ctagstype' : 'coffee',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 'm:methods',
        \ 'f:functions',
        \ 'v:variables',
        \ 'f:fields',
    \ ]
\ }

let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
let g:tagbar_type_javascript = {
    \ 'ctagsbin' : 'jsctags'
\ }

let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

let g:tagbar_type_typescript = {
  \ 'ctagstype': 'typescript',
  \ 'kinds': [
    \ 'c:classes',
    \ 'n:modules',
    \ 'f:functions',
    \ 'v:variables',
    \ 'v:varlambdas',
    \ 'm:members',
    \ 'i:interfaces',
    \ 'e:enums',
  \ ]
\ }
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_ignore_case = 1
let g:clever_f_use_migemo = 1
let g:clever_f_not_overwrites_standard_mappings = 1
map f <Plug>(clever-f-f)
map F <Plug>(clever-f-F)
'''

[[plugins]]
repo = 'kana/vim-niceblock'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'kballard/vim-fish'

[[plugins]]
repo = 'othree/yajs.vim' # ES6 syntax

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = 'Denite'
hook_add = '''
if executable('rg')
	call denite#custom#var('grep', 'command', ['rg'])
	call denite#custom#var('grep', 'default_opts',
			\ ['-i', '--vimgrep', '--no-heading'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])
endif

call denite#custom#option('_', {
            \ 'start_filter': 1,
            \ 'split': 'floating',
            \ 'prompt': '$ ',
            \ 'wincol': 0,
            \ 'winrow': 0,
            \ 'winheight': 1000,
            \ 'winwidth': 1000,
            \ 'winminheight': -1,
            \ 'highlight-filter-background': 'Normal',
            \ 'highlight_window_background': 'Normal',
            \ })

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  call deoplete#custom#buffer_option('auto_complete', v:false)
  inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  imap <silent><buffer> jj <Plug>(denite_filter_quit)
endfunction

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

call denite#custom#source('filetype', 'matchers', ['matcher/substring'])
call denite#custom#source('file', 'matchers', ['matcher/substring'])
call denite#custom#source('file/rec', 'matchers', ['matcher/substring'])
call denite#custom#source('file_mru', 'matchers', ['matcher/substring'])
call denite#custom#source('grep', 'matchers', ['matcher/substring'])
call denite#custom#source('line', 'matchers', ['matcher/substring'])
call denite#custom#source('buffer', 'matchers', ['matcher/substring'])
call denite#custom#source('neoyank', 'matchers', ['matcher/substring'])

nnoremap <silent> s` :<C-u>Denite filetype<CR>
nnoremap <silent> sf :<C-u>DeniteBufferDir -split=no file file:new<CR>
nnoremap <silent> sd :<C-u>Denite file file:new<CR>
nnoremap <silent> sl :<C-u>Denite line<CR>
nnoremap <silent> sg :<C-u>DeniteCursorWord -split=no grep<CR>
nnoremap <silent> sG :<C-u>Denite grep<CR>
nnoremap <silent> s* :<C-u>DeniteCursorWord -split=no -buffer-name=search -mode=normal line<CR>
nnoremap <silent> sb :<C-u>Denite buffer<CR>
nnoremap <silent> sm :<C-u>Denite file_mru<CR>
nnoremap <silent> sy :<C-u>Denite neoyank<CR>
nnoremap <silent> ss :<C-u>Denite -resume<CR>
nnoremap <silent> sn :<C-u>Denite -resume -immediately -select=+1<CR>
nnoremap <silent> sp :<C-u>Denite -resume -immediately -select=-1<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
map t <Plug>(choosewin)
let g:choosewin_statusline_replace = 0
let g:choosewin_overlay_enable = 1
let g:choosewin_overlay_clear_multibyte = 1
let g:choosewin_blink_on_land = 0
let g:choosewin_label = "fgtrdsa"
let g:choosewin_tablabel = "123456789"
let g:choosewin_keymap   = {
      \'k' : 'tab_prev',
      \'j' : 'tab_next',
      \'h' : 'tab_first',
      \'l' : 'tab_last',
      \'<Space>' : 'win_land',
      \'t' : 'win_land',
      \}
'''


[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_leader_key=";"
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_smartcase = 1
" hi EasyMotionTarget ctermbg=none ctermfg=red
" hi EasyMotionShade  ctermbg=none ctermfg=blue
'''


[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = ['help', 'defx']
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
noremap U :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = 'noremap ! :Switch<CR>'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'thinca/vim-textobj-between.git'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'bkad/CamelCaseMotion'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
let g:rooter_change_directory_for_non_project_files = 'home'
let g:rooter_patterns = ['go.mod', 'build.gradle', 'Rakefile', 'tsconfig.json', '.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/']
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
call neomake#configure#automake('w')
'''


[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
"iTerm2 C-h key fixed for VIM and NeoVim https://geoffcorey.github.io/os/x/uncategorized/2015/10/12/iterm2-c-h-key-fixed-for-vim-and-neovim.html
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-/> :TmuxNaviga<cr>
'''
[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'cohama/vim-smartinput-endwise'
depends = 'vim-smartinput'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('expand-region', 'nv', 'r', '<Leader>e', '<Plug>(expand_region_expand)')
call submode#map('expand-region', 'nv', 'r', 'e', '<Plug>(expand_region_expand)')
call submode#map('expand-region', 'nv', 'r', 's', '<Plug>(expand_region_shrink)')

call submode#enter_with('winsize', 'n', '.', '<C-w>.', '<C-w><')
call submode#enter_with('winsize', 'n', ',', '<C-w>,', '<C-w>>')
call submode#enter_with('winsize', 'n', '=', '<C-w>=', '<C-w>+')
call submode#enter_with('winsize', 'n', '-', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '.', '<C-w><')
call submode#map('winsize', 'n', '', ',', '<C-w>>')
call submode#map('winsize', 'n', '', '=', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')

call submode#enter_with('changetab', 'n', '', 'gt', 'gt')
call submode#enter_with('changetab', 'n', '', 'gT', 'gT')
call submode#map('changetab', 'n', '', 't', 'gt')
call submode#map('changetab', 'n', '', 'T', 'gT')
'''

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'rizzatti/dash.vim''
hook_add = '''
nmap <silent> <leader>d <Plug>DashSearch
'''

[[plugins]]
repo = 'mxw/vim-jsx'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <Leader>gd :<C-u>Gvdiff<CR>
nnoremap <silent> <Leader>gs :<C-u>Gstatus<CR>
nnoremap <Leader>gl :<C-u>Glog<CR>
nnoremap <Leader>ga :<C-u>Gwrite<CR>
nnoremap <Leader>gr :<C-u>Gread<CR>
nnoremap <Leader>gc :<C-u>Gcommit<CR>
nnoremap <Leader>gC :<C-u>Git commit --amend<CR>
nnoremap <Leader>gp :<C-u>Git push<CR>
nnoremap <Leader>gb :<C-u>Gblame<CR>
nnoremap <Leader>gm :<C-u>Merginal<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
augroup fmt
  autocmd!
  autocmd BufWritePre * Neoformat
augroup END

let g:neoformat_enabled_javascript = []

let g:neoformat_typescriptreact_prettier = {
  \ 'exe': 'prettier',
  \ 'args': ['--stdin', '--stdin-filepath', '"%:p"', '--parser', 'typescript'],
  \ 'stdin': 1
  \ }

let g:neoformat_enabled_typescriptreact = ['prettier']

let g:neoformat_go_goreturns = {
  \ 'exe': 'goreturns',
  \ 'stdin': 1,
  \ }
let g:neoformat_enabled_go = ['goreturns']
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
" let g:rustfmt_autosave = 0
" let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
branch = 'next'
build = 'bash install.sh'
hook_add = '''
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'go': ['gopls'],
    \ 'cpp': ['clangd'],
    \ 'typescript': ['typescript-language-server', '--stdio'],
    \ 'typescriptreact': ['typescript-language-server', '--stdio'],
    \ 'dart': ['~/flutter/bin/cache/dart-sdk/bin/dart', '~/flutter/bin/cache/dart-sdk/bin/snapshots/analysis_server.dart.snapshot', '--lsp', "--client-id", 'vim', '--client-version','LnaguageClient'],
    \ }
let g:LanguageClient_rootMarkers = {
    \ 'rust': ['Cargo.toml'],
    \ 'go': ['go.mod'],
    \ 'typescript': ['tsconfig.json'],
    \ 'dart': ['pubspec.yaml'],
    \ }
" let g:LanguageClient_loggingLevel = 'DEBUG'
" let g:LanguageClient_loggingFile =  expand('LanguageClient.log') 
" let g:LanguageClient_waitOutputTimeout = 30
let g:LanguageClient_hoverPreview = "Always"

function LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    " nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
    nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
  endif
endfunction

autocmd FileType * call LC_maps()

" autocmd FileType typescript call s:lc_my_settings()
" function! s:lc_my_settings() abort
"     nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>
"     nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
" endfunction

'''

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
hook_add = '''
autocmd FileType java setlocal omnifunc=javacomplete#Complete
nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
nmap <F5> <Plug>(JavaComplete-Imports-Add)
nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
'''

[[plugins]]
repo = 'kballard/vim-swift'
hook_add = '''
'''

[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
'''

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
hook_add = '''
'''

[[plugins]]
repo = 'thosakwe/vim-flutter'
hook_add = '''
nnoremap <leader>fa :FlutterRun<cr>
nnoremap <leader>fq :FlutterQuit<cr>
nnoremap <leader>fr :FlutterHotReload<cr>
nnoremap <leader>fR :FlutterHotRestart<cr>
nnoremap <leader>fD :FlutterVisualDebug<cr>
'''
